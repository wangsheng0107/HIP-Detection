#include "Detection_BLE.h"




 int Detection_BLE::begin(){

    if(!BLE.begin()){ 
      Serial.print("Starting BLE failed");
      while (1);
    }

    BLEService DetectionServcie("8b7c6d4e-9bd2-439d-bfc2-9990d9db48ed"); // create service, GUID generated by https://www.guidgenerator.com/online-guid-generator.aspx
    // create switch characteristic and allow remote device to read and write
    BLEByteCharacteristic switchCharacteristic("8b7c6d4e-9bd2-439d-bfc2-9990d9db48ed", BLERead | BLEWrite);
    // create byte characteristic and allow remote device to read and write
    BLEByteCharacteristic LaserCharacteristic("8b7c6d4e-9bd2-439d-bfc2-9990d9db48ed", BLERead | BLEWrite);
    // create byte characteristic and allow remote device to get notifications
    BLEByteCharacteristic RDATACharacterstic("8b7c6d4e-9bd2-439d-bfc2-9990d9db48ed", BLERead | BLENotify);


    BLE.setLocalName("HIP-Detection");
    // set the UUID for the service this peripheral advertises:
    BLE.setAdvertisedService(DetectionServcie);

    // add the characteristics to the service
    DetectionServcie.addCharacteristic(switchCharacteristic);
    DetectionServcie.addCharacteristic(LaserCharacteristic);
    DetectionServcie.addCharacteristic(RDATACharacterstic);

    // add the service
    BLE.addService(DetectionServcie);

    // set initial values for switch and laser control
    switchCharacteristic.writeValue(0);
    LaserCharacteristic.writeValue(0);

    // start advertising
    BLE.advertise();

    Serial.println("Bluetooth device active, waiting for connections...");
  }