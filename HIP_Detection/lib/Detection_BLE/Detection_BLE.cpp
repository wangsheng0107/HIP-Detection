#include "Detection_BLE.h"




 int DetectionBLE::begin(){

    if(!BLE.begin()){ 
      Serial.print("Starting BLE failed");
      while (1);
    }

    BLEService DetectionServcie("19B10010-E8F2-537E-4F6C-D104768A1214"); // create service, GUID generated by https://www.guidgenerator.com/online-guid-generator.aspx
    // create switch characteristic and allow remote device to read and write
    BLEByteCharacteristic switchCharacteristic("19B10011-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
      // BLEDescriptor SwitchDescriptor("2901", "millis");
      // switchCharacteristic.addDescriptor(SwitchDescriptor);
      // Tried to give charactersitc a name, failed. Recognized as 'unknown characteristic'
    // create byte characteristic and allow remote device to read and write
    BLEByteCharacteristic LaserCharacteristic("19B10012-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
      // BLEDescriptor LaserDescriptor("2902", "Laser");
      // LaserCharacteristic.addDescriptor(LaserDescriptor);
    // create byte characteristic and allow remote device to get notifications
    BLEByteCharacteristic RDATACharacterstic("19B10013-E8F2-537E-4F6C-D104768A1214", BLERead | BLENotify);
      // BLEDescriptor RDATADescriptor("2903", "RDATA");
      // RDATACharacterstic.addDescriptor(RDATADescriptor);


    BLE.setLocalName("HIP-Detection");
    // set the UUID for the service this peripheral advertises:
    BLE.setAdvertisedService(DetectionServcie);

    // add the characteristics to the service
    DetectionServcie.addCharacteristic(switchCharacteristic);
    DetectionServcie.addCharacteristic(LaserCharacteristic);
    DetectionServcie.addCharacteristic(RDATACharacterstic);

    // add the service
    BLE.addService(DetectionServcie);

    // set initial values for switch and laser control
    switchCharacteristic.writeValue(0);
    LaserCharacteristic.writeValue(0);

    // start advertising
    if(!BLE.advertise()){
      Serial.println("Bluetooth Advertise failed.");
      return 0;
    }
    else{
    Serial.println("Bluetooth device advertising, waiting for connections...");

    return 1;
    }
  }